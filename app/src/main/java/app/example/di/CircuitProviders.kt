package app.example.di

import com.slack.circuit.foundation.Circuit
import com.slack.circuit.runtime.presenter.Presenter
import com.slack.circuit.runtime.ui.Ui
import dev.zacsweers.metro.AppScope
import dev.zacsweers.metro.ContributesTo
import dev.zacsweers.metro.Multibinds
import dev.zacsweers.metro.Provides
import dev.zacsweers.metro.SingleIn

/**
 * Metro binding container that provides dependencies for the Circuit framework.
 *
 * This interface uses [ContributesTo] which is part of Metro's aggregation system,
 * inspired by Anvil. All bindings declared here will be automatically contributed
 * to the [AppScope] dependency graph.
 *
 * Key Metro features used:
 * - [ContributesTo]: Automatically contributes bindings to the specified scope
 * - [Multibinds]: Declares multibinding collections that can be empty
 * - [Provides]: Functions that provide dependencies
 * - [SingleIn]: Scopes the Circuit instance to the application lifetime
 *
 * See https://zacsweers.github.io/metro/latest/aggregation/ for more on aggregation.
 * See https://zacsweers.github.io/metro/latest/bindings/#multibindings for more on multibindings.
 */
@ContributesTo(AppScope::class)
interface CircuitProviders {
    /**
     * Metro multi-binding method that provides a set of Presenter.Factory instances.
     *
     * This is a multibinding declaration - Circuit screens will contribute their
     * presenter factories to this set using @IntoSet or @ContributesIntoSet.
     *
     * See https://zacsweers.github.io/metro/latest/bindings/#multibindings
     */
    @Multibinds fun presenterFactories(): Set<Presenter.Factory>

    /**
     * Metro multi-binding method that provides a set of Ui.Factory instances.
     *
     * This is a multibinding declaration - Circuit screens will contribute their
     * UI factories to this set using @IntoSet or @ContributesIntoSet.
     *
     * See https://zacsweers.github.io/metro/latest/bindings/#multibindings
     */
    @Multibinds fun uiFactories(): Set<Ui.Factory>

    /**
     * Provides a singleton instance of Circuit with presenter and UI factories configured.
     *
     * The @JvmSuppressWildcards annotation is needed to prevent Kotlin from using
     * wildcard types in the generated bytecode, ensuring compatibility with the
     * multibinding system.
     *
     * See https://zacsweers.github.io/metro/latest/scopes/ for more on singleton scoping.
     */
    @Provides
    @SingleIn(AppScope::class)
    fun provideCircuit(
        presenterFactories: @JvmSuppressWildcards Set<Presenter.Factory>,
        uiFactories: @JvmSuppressWildcards Set<Ui.Factory>,
    ): Circuit =
        Circuit
            .Builder()
            .addPresenterFactories(presenterFactories)
            .addUiFactories(uiFactories)
            .build()
}
